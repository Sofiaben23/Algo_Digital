---
title: "Canton map"
format: html
editor: visual
---

```{r}
library(sf)
library(terra)
library(dplyr)
library(spData)
```

```{r}
install.packages("tmap", repos = c("https://r-tmap.r-universe.dev",
                                   "https://cloud.r-project.org"))
```

```{r}
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(ggplot2) # tidyverse data visualization package
library(here)
library(dplyr)
library(tidyr)
library(jsonlite)
```

```{r}
Cantons <- read.csv(here("Map_Cantons", "dataset", "georef-switzerland-kanton.csv"), sep = ";")
```

```{r}
map_data <- Cantons %>% 
  select(Geo.Point, Official.Name.Kanton)

map_data <- na.omit(map_data)

map_data <- map_data %>%
  separate(Geo.Point, into = c("latitude", "longitude"), sep = ",", convert = TRUE)

```

```{r}
map <- leaflet() %>%
  addTiles() %>%
  addMarkers(data = map_data, 
             lat = ~latitude, 
             lng = ~longitude,
             popup = ~Official.Name.Kanton)

map
```

```{r}
parsed_geojson <- lapply(Cantons$Geo.Shape, function(x) {
  geojson <- fromJSON(x)
  # Extract coordinates from the GeoJSON data
  coordinates <- geojson$coordinates
  return(coordinates)
})
```

```{r}
map <- leaflet() %>%
  addProviderTiles("CartoDB.Positron")  # Basemap provider

# Add polygons for each feature
for (coordinates in parsed_geojson) {
  map <- map %>% addPolygons(data = coordinates, weight = 1, fillOpacity = 0.5)
}

# Display the map
map
```
